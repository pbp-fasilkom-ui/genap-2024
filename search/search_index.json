{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Beranda","text":"<p>Selamat datang di Pemrograman Berbasis Platform Semester Genap 2023/2024. Situs web ini akan memuat informasi terkait dengan perkuliahan yang akan dipublikasikan secara rutin, seperti dokumen tutorial, tugas individu, dan tugas kelompok. Harap cek situs web ini secara berkala.</p>"},{"location":"#dosen","title":"Dosen","text":"<p>Arawinda Dinakaramani, S.Kom., M.Hum.</p>"},{"location":"#asisten-dosen","title":"Asisten Dosen","text":"<ol> <li>Muhammad Iqbal Dwitama (MID) - Koordinator Asisten Dosen</li> <li>Muhammad Nabil Mu'afa (BIL)</li> </ol>"},{"location":"tutorial/tutorial-0/","title":"Tutorial 0: Konfigurasi dan Instalasi Git dan Django","text":"<p>Pemrograman Berbasis Platform (CSGE602022) \u2014 diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Ganjil 2023/2024</p>"},{"location":"tutorial/tutorial-0/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Setelah menyelesaikan tutorial ini, mahasiswa diharapkan untuk dapat:</p> <ul> <li>Mengerti perintah-perintah dasar Git yang perlu diketahui untuk mengerjakan proyek aplikasi.</li> <li>Menggunakan perintah-perintah dasar Git yang perlu diketahui untuk mengerjakan proyek aplikasi.</li> <li>Membuat repositori Git lokal dan daring (GitHub).</li> <li>Menambahkan remote antara repositori Git lokal dan repositori daring pada GitHub.</li> <li>Memahami branching pada Git dan mampu melakukan merge request/pull request.</li> </ul>"},{"location":"tutorial/tutorial-0/#tutorial-pembuatan-akun-github-lewati-jika-sudah-ada","title":"Tutorial: Pembuatan Akun GitHub (Lewati Jika Sudah Ada)","text":""},{"location":"tutorial/tutorial-0/#pengenalan-tentang-git-dan-github","title":"Pengenalan Tentang Git dan GitHub","text":"<p>Pengenalan awal ini akan membantumu memahami dasar-dasar mengenai Git dan platform berbasis web yang dikenal sebagai GitHub.</p>"},{"location":"tutorial/tutorial-0/#git-sistem-kontrol-versi-yang-kuat","title":"Git: Sistem Kontrol Versi yang Kuat","text":"<ul> <li>Git adalah sistem kontrol versi yang membantumu melacak perubahan pada kode sumber proyek.</li> <li>Dengan Git, kamu dapat memantau semua revisi yang telah dilakukan pada proyekmu seiring waktu.</li> </ul>"},{"location":"tutorial/tutorial-0/#github-platform-kolaborasi-menggunakan-git","title":"GitHub: Platform Kolaborasi Menggunakan Git","text":"<ul> <li>GitHub adalah platform berbasis web yang memungkinkanmu untuk menyimpan, mengelola, dan berkolaborasi pada proyek-proyek menggunakan Git.</li> <li>Ini memberikan wadah yang aman untuk meng-host proyekmu dan berinteraksi dengan rekan tim melalui Git.</li> </ul>"},{"location":"tutorial/tutorial-0/#mengapa-penting","title":"Mengapa Penting?","text":"<ul> <li>Git dan GitHub memainkan peran penting dalam pengembangan perangkat lunak modern dan kolaborasi tim.</li> <li>Keduanya memungkinkan tim untuk melacak perubahan kode, menyimpan versi, dan bekerja bersama dalam proyek secara efisien.</li> </ul> <p>Dengan pemahaman dasar mengenai Git dan GitHub, kamu siap untuk melangkah lebih jauh dalam dunia pengembangan perangkat lunak yang kolaboratif dan terstruktur.</p>"},{"location":"tutorial/tutorial-0/#langkah-1-membuat-akun-di-github","title":"Langkah 1: Membuat Akun di GitHub","text":"<p>Langkah selanjutnya adalah membuat akun di GitHub, yang akan memungkinkanmu untuk mulai berkolaborasi pada proyek-proyek menggunakan Git.</p> <ol> <li> <p>Buka Situs Web GitHub</p> </li> <li> <p>Buka peramban web dan akses GitHub.</p> </li> <li> <p>Membuat Akun</p> </li> <li> <p>Di halaman beranda GitHub, cari tombol <code>Sign up</code> di pojok kanan atas halaman.</p> </li> <li> <p>Klik tombol tersebut untuk memulai proses pendaftaran akun.</p> </li> <li> <p>Isi Formulir Pendaftaran</p> </li> <li> <p>Isi formulir pendaftaran dengan informasi yang diperlukan, seperti nama pengguna yang ingin digunakan, alamat email yang valid, dan kata sandi yang aman.</p> </li> <li> <p>Pastikan kamu menyimpan informasi ini dengan aman untuk masuk ke akunmu di masa mendatang.</p> </li> <li> <p>Verifikasi Akun Melalui Email</p> </li> <li> <p>Setelah mengisi formulir, GitHub akan mengirimkan email verifikasi ke alamat email yang kamu berikan.</p> </li> <li> <p>Buka email tersebut dan ikuti instruksi untuk verifikasi akunmu.</p> </li> <li> <p>Akun GitHub Siap Digunakan</p> </li> <li> <p>Setelah verifikasi selesai, kamu akan memiliki akun GitHub yang siap digunakan untuk berkolaborasi dalam proyek dan melacak perubahan menggunakan Git.</p> </li> </ol> <p>Catatan:</p> <ul> <li>Akun GitHub adalah pintu masuk untuk terlibat dalam kolaborasi proyek dan menyimpan proyekmu di platform ini.</li> <li>Pastikan informasi pendaftaran yang kamu berikan akurat dan aman.</li> </ul>"},{"location":"tutorial/tutorial-0/#selamat-kamu-telah-membuat-akun-github","title":"Selamat, Kamu Telah Membuat Akun GitHub","text":"<p>Kamu sekarang telah memiliki akun GitHub yang dapat digunakan untuk menyimpan proyek, berkolaborasi dengan orang lain, dan masih banyak lagi.</p>"},{"location":"tutorial/tutorial-0/#tutorial-instalasi-ide","title":"Tutorial: Instalasi IDE","text":"<p>IDE (Integrated Development Environment) adalah perangkat lunak yang membantu para pengembang dalam menulis, mengedit, dan mengelola kode. Berikut adalah langkah-langkah untuk memasang IDE.</p>"},{"location":"tutorial/tutorial-0/#langkah-1-pemilihan-text-editor-atau-ide","title":"Langkah 1: Pemilihan Text Editor atau IDE","text":"<p>Pilihlah text editor atau IDE yang sesuai dengan preferensimu. Beberapa pilihan populer yang dapat kamu pertimbangkan meliputi:</p> <ul> <li>Visual Studio Code</li> <li>Sublime Text</li> <li>PyCharm</li> <li>Vim</li> </ul>"},{"location":"tutorial/tutorial-0/#langkah-2-proses-instalasi","title":"Langkah 2: Proses Instalasi","text":"<ol> <li>Pergi ke situs web resmi IDE yang kamu pilih.</li> <li>Ikuti petunjuk yang diberikan untuk mengunduh installer IDE.</li> <li>Jalankan installer dan ikuti instruksi di layar untuk menyelesaikan proses instalasi.</li> </ol>"},{"location":"tutorial/tutorial-0/#langkah-3-memulai-menggunakan-ide","title":"Langkah 3: Memulai Menggunakan IDE","text":"<ol> <li>Setelah proses instalasi selesai, buka IDE yang telah terinstal.</li> <li>Eksplorasi antarmuka dan fitur yang disediakan oleh IDE untuk membantumu dalam pengembangan proyek.</li> </ol> <p>Catatan:</p> <ul> <li>Pastikan kamu memilih IDE yang sesuai dengan jenis proyek yang akan dikerjakan.</li> <li>Jangan ragu untuk mengeksplorasi fitur-fitur IDE (contoh: extensions atau plugin) dan memanfaatkan sumber daya pendukung, seperti dokumentasi dan tutorial, untuk meningkatkan produktivitas dalam pengembangan perangkat lunak.</li> </ul>"},{"location":"tutorial/tutorial-0/#tutorial-instalasi-dan-konfigurasi-git","title":"Tutorial: Instalasi dan Konfigurasi Git","text":""},{"location":"tutorial/tutorial-0/#langkah-1-instalasi-git","title":"Langkah 1: Instalasi Git","text":"<p>Jika Git belum terpasang pada sistem, kamu dapat mengikuti langkah-langkah berikut untuk menginstalnya.</p> <ol> <li>Buka situs web resmi Git di sini.</li> <li>Pilih sistem operasi yang sesuai (Windows, macOS, atau Linux) dan unduh installer yang sesuai.</li> <li>Jalankan installer yang telah diunduh dan ikuti petunjuk di layar untuk menyelesaikan proses instalasi.</li> </ol>"},{"location":"tutorial/tutorial-0/#langkah-2-konfigurasi-awal-git","title":"Langkah 2: Konfigurasi Awal Git","text":"<p>Setelah Git terpasang, langkah-langkah berikut akan membantumu mengatur konfigurasi awal sebelum mulai menggunakan Git.</p> <ol> <li>Buatlah sebuah folder/direktori baru untuk menyimpan proyek Git kamu, kemudian masuklah ke direktori tersebut.</li> <li>Salinlah path ke direktori yang sudah kamu buat.</li> <li>Buka terminal atau command prompt pada sistem, kemudian pindah ke direktori yang sudah kamu buat dengan menjalankan perintah <code>cd &lt;path_direktori&gt;</code></li> <li>Inisiasi repositori baru dengan perintah <code>git init</code>. Perintah ini akan membuat repositori Git kosong di dalam direktori yang kamu tentukan.</li> </ol>"},{"location":"tutorial/tutorial-0/#langkah-3-konfigurasi-nama-pengguna-dan-email","title":"Langkah 3: Konfigurasi Nama Pengguna dan Email","text":"<p>Sebelum mulai berkontribusi ke repositori, konfigurasikan nama pengguna dan alamat email agar terhubung dengan commit-mu.</p> <p>Atur username dan email yang akan diasosiasikan dengan pekerjaanmu ke repositori Git ini dengan menjalankan perintah di bawah ini. Sesuaikan dengan username dan email yang kamu gunakan pada GitHub.</p> <pre><code>git config --global user.name \"&lt;NAME&gt;\"\ngit config --global user.email \"&lt;EMAIL&gt;\"\n</code></pre> <p>Contoh:</p> <pre><code>git config --global user.name \"pakbepe\"\ngit config --global user.email \"pak.bepe@cs.ui.ac.id\"\n</code></pre> <p>Perlu diketahui bahwa flag <code>--global</code> akan mengubah konfigurasi global untuk seluruh sistem.</p>"},{"location":"tutorial/tutorial-0/#langkah-4-verifikasi-konfigurasi","title":"Langkah 4: Verifikasi Konfigurasi","text":"<p>Untuk memastikan konfigurasi telah diatur dengan benar pada repositori lokal, kamu dapat menjalankan perintah berikut.</p> <pre><code>git config --list\n</code></pre> <p>Catatan:</p> <ul> <li>Pastikan untuk mengganti <code>&lt;NAME&gt;</code> dan <code>&lt;EMAIL&gt;</code> dengan informasi pribadimu</li> <li>Gunakan langkah-langkah ini sebagai panduan untuk mengkonfigurasi Git sesuai kebutuhanmu.</li> </ul>"},{"location":"tutorial/tutorial-0/#tutorial-penggunaan-dasar-git","title":"Tutorial: Penggunaan Dasar Git","text":"<p>Repositori adalah tempat penyimpanan untuk proyek perangkat lunak, yang mencakup semua revisi dan perubahan yang telah dilakukan pada kode. Untuk mengeksekusi perintah-perintah Git, kamu dapat melakukannya pada repositori di GitHub, platform kolaboratif untuk mengelola proyek menggunakan Git.</p>"},{"location":"tutorial/tutorial-0/#langkah-1-melakukan-inisiasi-repositori-di-github","title":"Langkah 1: Melakukan Inisiasi Repositori di GitHub","text":"<p>Langkah pertama dalam penggunaan Git adalah melakukan inisiasi repositori di GitHub untuk memulai pelacakan perubahan pada proyekmu.</p> <ol> <li> <p>Buka GitHub melalui peramban web.</p> </li> <li> <p>Buat Repositori Baru</p> </li> <li> <p>Pada halaman beranda GitHub, buat repositori baru dengan nama <code>my-first-repo</code>.</p> </li> <li> <p>Buka halaman repositori yang baru kamu buat. Pastikan untuk mengatur visibilitas proyek sebagai \"Public\" dan biarkan pengaturan lainnya pada nilai default.</p> </li> <li> <p>Tentukan Direktori Lokal</p> </li> <li> <p>Pilih direktori lokal di komputermu yang telah diinisiasi dengan Git. Inilah tempat kamu akan menyimpan versi lokal dari proyek.</p> </li> <li> <p>Tambahkan Berkas <code>README.md</code></p> </li> <li> <p>Buat berkas baru dengan nama <code>README.md</code> dalam direktori lokal proyekmu.</p> </li> <li> <p>Isi berkas <code>README.md</code> dengan informasi seperti nama, NPM, dan kelas. Contoh:</p> <pre><code>Nama : Pak Bepe\n\nNPM : 2201234567\n\nKelas : PBP A\n</code></pre> </li> <li> <p>Cek Status dan Lakukan Tracking</p> </li> <li> <p>Buka command prompt atau terminal, lalu jalankan <code>git status</code> pada direktori yang sudah kamu pilih. Perintah ini akan menampilkan berkas-berkas yang belum di-track (untracked).</p> </li> <li> <p>Gunakan perintah <code>git add README.md</code> untuk menandai berkas README.md sebagai berkas yang akan di-commit (tracked).</p> </li> <li> <p>Commit Perubahan</p> </li> <li> <p>Jalankan kembali <code>git status</code> dan pastikan berkas README.md sudah ditandai sebagai berkas yang akan di-commit.</p> </li> <li>Lanjutkan dengan menjalankan <code>git commit -m \"&lt;KOMENTAR KAMU&gt;\"</code> untuk membuat commit dengan pesan komentar yang sesuai dengan perubahan yang kamu lakukan.</li> </ol> <p>Catatan:</p> <ul> <li>Langkah ini akan membuat kamu siap untuk mulai melacak perubahan pada proyek menggunakan Git.</li> <li>Good practice dalam memberikan komentar commit adalah menjelaskan dengan singkat apa yang kamu lakukan.</li> <li>Komentar commit yang baik dapat membantumu dan rekan-rekan tim dalam memahami tujuan perubahan tersebut.</li> <li>Hindari komentar yang terlalu umum atau ambigu, seperti <code>Perbaikan bug</code> atau <code>Update file</code>.</li> </ul>"},{"location":"tutorial/tutorial-0/#langkah-2-menghubungkan-repositori-lokal-dengan-repositori-di-github","title":"Langkah 2: Menghubungkan Repositori Lokal dengan Repositori di GitHub","text":"<p>Setelah melakukan inisiasi repositori lokal, langkah selanjutnya adalah menghubungkannya dengan repositori di GitHub agar kamu dapat berkolaborasi dan menyimpan perubahan di platform daring tersebut.</p> <ol> <li> <p>Buat Branch Utama Baru</p> </li> <li> <p>Di terminal atau command prompt, jalankan perintah <code>git branch -M main</code> untuk membuat branch utama baru dengan nama \"main\".</p> </li> <li> <p>Pastikan huruf \"M\" pada perintah <code>-M</code> ditulis dengan huruf kapital.</p> </li> <li> <p>Hubungkan dengan Repositori di GitHub</p> </li> <li> <p>Gunakan perintah <code>git remote add origin &lt;URL_REPO&gt;</code> untuk menghubungkan repositori lokal dengan repositori di GitHub.</p> </li> <li> <p>Gantilah <code>&lt;URL_REPO&gt;</code> dengan URL HTTPS repositori yang telah kamu buat di GitHub. Contoh:</p> <pre><code>git remote add origin https://github.com/pakbepe/test.git\n</code></pre> </li> <li> <p>Lakukan Penyimpanan Pertama ke GitHub</p> </li> <li> <p>Terakhir, lakukan penyimpanan pertama ke GitHub dengan menjalankan perintah <code>git push -u origin main</code>.</p> </li> <li> <p>Perintah ini akan mengirimkan semua perubahan yang ada pada branch saat ini (dalam hal ini adalah branch utama) di repositori lokal ke branch main di repositori GitHub.</p> </li> <li> <p>Lakukan Pengecekan Kembali</p> </li> <li> <p>Lakukan refresh pada halaman repositori kamu, seharusnya berkas <code>README.md</code> kamu sudah dapat terlihat.</p> </li> </ol> <p>Catatan:</p> <ul> <li>Langkah ini penting untuk menjaga konsistensi antara repositori lokal dan repositori di GitHub.</li> <li>Proses ini memungkinkanmu untuk mulai berkolaborasi dan menyimpan perubahan proyek secara terstruktur di platform GitHub.</li> </ul>"},{"location":"tutorial/tutorial-0/#langkah-3-melakukan-cloning-terhadap-suatu-repositori","title":"Langkah 3: Melakukan Cloning terhadap Suatu Repositori","text":"<p>Cloning repositori adalah proses menduplikasi seluruh konten dari repositori yang ada di platform GitHub ke komputer lokal. Langkah-langkahnya adalah sebagai berikut.</p> <ol> <li> <p>Buka halaman repositori di GitHub yang telah kamu buat sebelumnya.</p> </li> <li> <p>Salin URL Clone</p> </li> <li> <p>Klik tombol <code>Code</code> di pojok kanan atas halaman repositori di GitHub.</p> </li> <li> <p>Pilih opsi HTTPS untuk salin URL clone.</p> </li> <li> <p>Clone Repositori ke Komputer Lokal</p> </li> <li> <p>Buka terminal atau command prompt di direktori yang berbeda dari tempat repositori lokalmu sebelumnya.</p> </li> <li>Jalankan perintah <code>git clone &lt;URL_CLONE&gt;</code> (gantilah URL_CLONE dengan URL yang telah kamu salin).</li> <li>Perintah ini akan menduplikasi seluruh repositori ke komputer lokalmu.</li> </ol> <p>Saat ini, kamu memiliki tiga repositori:</p> <ol> <li>Repositori asli di komputer lokal.</li> <li>Repositori daring di GitHub yang terhubung dengan repositori lokal.</li> <li>Repositori baru hasil dari proses cloning yang terhubung dengan repositori GitHub.</li> </ol> <p>Catatan:</p> <ul> <li>Langkah ini memungkinkanmu untuk bekerja dengan repositori di berbagai tempat dengan mudah.</li> </ul>"},{"location":"tutorial/tutorial-0/#langkah-4-melakukan-push-kepada-suatu-repositori","title":"Langkah 4: Melakukan Push kepada Suatu Repositori","text":"<p>Seperti yang sudah disinggung sebelumnya (Langkah 2), push adalah proses mengirimkan perubahan yang kamu lakukan di repositori lokal ke repositori di GitHub. Langkah-langkahnya adalah sebagai berikut.</p> <ol> <li> <p>Buka kembali repositori lokal yang pertama kali kamu buat.</p> </li> <li> <p>Ubah isi berkas <code>README.md</code> dengan menambahkan atribut Hobi. Contohnya adalah sebagai berikut.</p> </li> </ol> <pre><code>Nama : Pak Bepe\n\nNPM : 2201234567\n\nKelas : PBP A\n\nHobi : Tidur\n</code></pre> <ol> <li> <p>Lakukan Push ke Repositori GitHub</p> </li> <li> <p>Buka terminal atau command prompt, kemudian masuk ke repositori lokal yang telah kamu ubah.</p> </li> <li>Jalankan perintah <code>git status</code> untuk melihat status perubahan yang dilakukan.</li> <li>Jalankan <code>git add README.md</code> untuk menambahkan perubahan ke dalam tahap yang akan di-commit.</li> <li>Lakukan commit dengan menjalankan perintah <code>git commit -m \"&lt;KOMENTAR KAMU&gt;\"</code> untuk memberikan deskripsi singkat tentang perubahan yang kamu lakukan.</li> <li> <p>Terakhir, jalankan <code>git push -u origin &lt;NAMA_BRANCH&gt;</code> untuk mengirim perubahan ke branch yang dipilih pada repositori GitHub (gantilah \"Nama Branch\" dengan target branch, misalnya <code>main</code>).</p> </li> <li> <p>Lakukan Pengecekan Kembali</p> </li> <li> <p>Lakukan refresh halaman kamu, seharusnya berkas <code>README.md</code> kamu sudah berubah.</p> </li> </ol> <p>Catatan: Jika kamu ingin mengambil semua perubahan yang belum di-stage (ditandai untuk dimasukkan dalam commit) dari seluruh direktori proyek kamu, jalankan <code>git add .</code>.</p>"},{"location":"tutorial/tutorial-0/#langkah-5-melakukan-pull-dari-suatu-repositori","title":"Langkah 5: Melakukan Pull dari Suatu Repositori","text":"<p>Pull pada suatu repositori adalah proses mengambil perubahan terbaru dari repositori di GitHub dan menggabungkannya dengan repositori lokal.</p> <ol> <li> <p>Buka kembali repositori lokal yang telah kamu clone sebelumnya di terminal atau command prompt.</p> </li> <li> <p>Jalankan Perintah Pull</p> </li> <li> <p>Jalankan perintah <code>git pull origin main</code> untuk mengambil perubahan terbaru yang ada di repositori GitHub dan menggabungkannya dengan repositori lokalmu.</p> </li> <li> <p>Lakukan Pengecekan Kembali</p> </li> <li> <p>Periksa kembali berkas <code>README.md</code> di repositori lokal tersebut. Seharusnya berkas <code>README.md</code> kamu sudah menampilkan hobi kamu.</p> </li> </ol> <p>Catatan:</p> <ul> <li>Langkah ini memastikan bahwa repositori lokalmu selalu diperbarui dengan perubahan terbaru yang ada di repositori GitHub.</li> <li>Melakukan pull secara berkala penting untuk menghindari konflik dan memastikan kamu bekerja dengan versi terbaru dari proyek.</li> </ul>"},{"location":"tutorial/tutorial-0/#langkah-6-melakukan-branching-pada-suatu-repositori","title":"Langkah 6: Melakukan Branching pada Suatu Repositori","text":"<p>Pada tahap ini kamu akan mempelajari tentang penggunaan branch dalam Git. Penggunaan branch memungkinkan kamu untuk mengembangkan fitur atau memperbaiki bug di lingkungan terpisah sebelum menggabungkannya kembali ke branch utama.</p> <p>Apa Itu Branch di Git?</p> <ul> <li>Branch di Git adalah cabang terpisah dari source code yang memungkinkan pengembangan independen dari fitur atau perubahan.</li> <li> <p>Hal ini memungkinkan tim untuk bekerja pada fitur atau perbaikan bug tanpa mengganggu kode yang ada di branch utama.</p> </li> <li> <p>Membuat dan Mengganti Branch Baru</p> </li> <li> <p>Pada direktori repositori lokal asli (bukan clone), jalankan perintah <code>git checkout -b &lt;NAMA_BRANCH&gt;</code> di terminal atau command prompt untuk membuat dan beralih ke branch baru. Contoh: <code>git checkout -b jurusan_branch</code></p> </li> <li> <p>Tambahkan atribut jurusan pada berkas <code>README.md</code>. Contoh:</p> <pre><code>Nama : Pak Bepe\n\nNPM : 2201234567\n\nKelas : PBP A\n\nHobi : Tidur\n\nJurusan : Ilmu Sistem Informasi Komputer\n</code></pre> </li> <li> <p>Menyimpan Perubahan dan Push ke GitHub</p> </li> <li> <p>Setelah menambahkan atribut jurusan, simpan berkas tersebut.</p> </li> <li>Lakukan <code>add</code>, <code>commit</code>, dan <code>push</code> ke GitHub dengan menjalankan perintah yang sudah kamu kuasai sebelumnya.</li> <li> <p>Jalankan perintah <code>git push -u origin &lt;NAMA_BRANCH&gt;</code>. Pastikan untuk mengganti <code>&lt;NAMA_BRANCH&gt;</code> sesuai dengan nama branch baru yang telah dibuat.</p> </li> <li> <p>Menggabungkan Branch Menggunakan Pull Request</p> </li> <li> <p>Buka kembali halaman repositori kamu pada GitHub.</p> </li> <li>Secara otomatis, pop-up dengan tombol <code>Compare &amp; pull request</code> akan muncul. Jika tidak, alternatifnya adalah dengan menekan tombol <code>Pull Request</code> dan kemudian memilih opsi <code>New pull request</code>.</li> <li>Setelah itu, GitHub akan membandingkan perubahan yang ada di kedua branch yang ingin digabungkan.</li> <li>Apabila tidak terdapat konflik, tekan tombol <code>Merge pull request</code> yang akan menggabungkan perubahan dari branch yang ingin digabungkan ke dalam branch utama (<code>main</code>).</li> <li>Dengan melakukan langkah di atas, semua perubahan dari kedua branch akan diintegrasikan ke dalam branch utama, menciptakan kesatuan antara perubahan tersebut.</li> </ul> <p>Catatan:</p> <ul> <li>Jika kamu ingin berpindah antar branch yang sudah ada, jalankan <code>git checkout &lt;NAMA_BRANCH&gt;</code> pada terminal. Flag <code>-b</code> pada perintah sebelum-sebelumnya digunakan untuk membuat branch baru dan beralih ke branch tersebut dalam satu langkah.</li> <li>Konflik terjadi ketika perubahan yang dilakukan pada satu branch bertabrakan dengan perubahan yang dilakukan pada branch lain. Misalnya, jika dua pengembang mengubah bagian yang sama dari berkas yang sama dalam waktu bersamaan, Git tidak dapat dengan otomatis memutuskan perubahan mana yang harus diterapkan.</li> <li>Jika terdapat konflik atau perubahan yang saling bertabrakan, platform ini akan meminta kamu untuk menentukan perubahan mana yang sebaiknya diambil.</li> <li>Penting untuk memahami konsep branching dalam Git, karena ini memungkinkan pengembangan yang terorganisir dan terpisah, sebelum semua perubahan dikombinasikan kembali ke dalam kode utama.</li> </ul>"},{"location":"tutorial/tutorial-0/#tutorial-instalasi-django-dan-inisiasi-proyek-django","title":"Tutorial: Instalasi Django dan Inisiasi Proyek Django","text":"<p>Django adalah kerangka kerja (framework) yang populer untuk pengembangan aplikasi web dengan bahasa pemrograman Python. Dalam tutorial ini, kamu akan mempelajari langkah-langkah instalasi Django dan inisiasi proyek demo sebagai starter.</p>"},{"location":"tutorial/tutorial-0/#langkah-1-membuat-direktori-dan-mengaktifkan-virtual-environment","title":"Langkah 1: Membuat Direktori dan Mengaktifkan Virtual Environment","text":"<ol> <li>Buat direktori baru dengan nama <code>book-tracker</code> dan masuk ke dalamnya.</li> <li>Di dalam direktori tersebut, buka command prompt (Windows) atau terminal shell (Unix).</li> <li>Buat virtual environment dengan menjalankan perintah berikut.</li> </ol> <pre><code>python -m venv env\n</code></pre> <ol> <li> <p>Virtual environment ini berguna untuk mengisolasi package serta dependencies dari aplikasi agar tidak bertabrakan dengan versi lain yang ada pada komputermu. Kamu dapat mengaktifkan virtual environment dengan perintah berikut.</p> </li> <li> <p>Windows:</p> <pre><code>env\\Scripts\\activate\n</code></pre> </li> <li> <p>Unix (Mac/Linux):</p> <pre><code>source env/bin/activate\n</code></pre> </li> <li> <p>Virtual environment akan aktif dan ditandai dengan <code>(env)</code> di baris input terminal.</p> </li> </ol>"},{"location":"tutorial/tutorial-0/#langkah-2-menyiapkan-dependencies-dan-membuat-proyek-django","title":"Langkah 2: Menyiapkan Dependencies dan Membuat Proyek Django","text":"<p>Dependencies adalah komponen atau modul yang diperlukan oleh suatu perangkat lunak untuk berfungsi, termasuk library, framework, atau package. Hal tersebut memungkinkan pengembang memanfaatkan kode yang telah ada, mempercepat pengembangan, tetapi juga memerlukan manajemen yang hati-hati untuk memastikan kompatibilitas versi yang tepat. Penggunaan virtual environment membantu mengisolasi dependencies antara proyek-proyek yang berbeda.</p> <ol> <li>Di dalam direktori yang sama, buat berkas <code>requirements.txt</code> dan tambahkan beberapa dependencies.</li> </ol> <pre><code>django\ngunicorn\nwhitenoise\npsycopg2-binary\nrequests\nurllib3\n</code></pre> <ol> <li>Lakukan instalasi terhadap dependencies yang ada dengan perintah berikut. Jangan lupa jalankan virtual environment terlebih dahulu sebelum menjalankan perintah berikut.</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Buat proyek Django bernama <code>book_tracker</code> dengan perintah berikut.</li> </ol> <pre><code>django-admin startproject book_tracker .\n</code></pre> <p>Pastikan karakter <code>.</code> tertulis di akhir perintah</p>"},{"location":"tutorial/tutorial-0/#langkah-3-konfigurasi-proyek-dan-menjalankan-server","title":"Langkah 3: Konfigurasi Proyek dan Menjalankan Server","text":"<ol> <li>Tambahkan <code>*</code> pada <code>ALLOWED_HOSTS</code> di <code>settings.py</code> untuk keperluan deployment:</li> </ol> <pre><code>...\nALLOWED_HOSTS = [\"*\"]\n...\n</code></pre> <p>Dalam konteks deployment, <code>ALLOWED_HOSTS</code> berfungsi sebagai daftar host yang diizinkan untuk mengakses aplikasi web. Dengan menetapkan nilai <code>[\"*\"]</code>, kamu mengizinkan akses dari semua host, yang akan memungkinkan aplikasi diakses secara luas. Namun, perlu diingat bahwa pengaturan ini harus digunakan dengan bijak dan hanya dalam situasi tertentu, seperti saat melakukan uji coba atau tahap awal pengembangan.</p> <ol> <li> <p>Pastikan bahwa berkas <code>manage.py</code> ada pada direktori yang aktif pada terminal kamu saat ini. Jalankan server Django dengan perintah:</p> </li> <li> <p>Windows:</p> <pre><code>python manage.py runserver\n</code></pre> </li> <li> <p>Unix:</p> <pre><code>python3 manage.py runserver\n</code></pre> </li> <li> <p>Buka http://localhost:8000 pada peramban web untuk melihat animasi roket sebagai tanda aplikasi Django kamu berhasil dibuat.</p> </li> </ol>"},{"location":"tutorial/tutorial-0/#langkah-4-menghentikan-server-dan-menonaktifkan-virtual-environment","title":"Langkah 4: Menghentikan Server dan Menonaktifkan Virtual Environment","text":"<ol> <li>Untuk menghentikan server, tekan <code>Ctrl+C</code> (Windows/Linux) atau <code>Control+C</code> (Mac) pada terminal.</li> <li>Nonaktifkan virtual environment dengan perintah:</li> </ol> <pre><code>deactivate\n</code></pre> <p>Selamat! Kamu telah berhasil membuat aplikasi Django dari awal.</p>"},{"location":"tutorial/tutorial-0/#tutorial-unggah-proyek-ke-repositori-github","title":"Tutorial: Unggah Proyek ke Repositori GitHub","text":"<ol> <li> <p>Buatlah repositori GitHub baru bernama <code>book-tracker</code> dengan visibilitas public.</p> </li> <li> <p>Inisiasi direktori lokal <code>book-tracker</code> sebagai repositori Git.</p> </li> </ol> <p>Hint: Ingat kembali tahap tutorial sebelumnya</p> <ol> <li> <p>Tambahkan Berkas <code>.gitignore</code></p> </li> <li> <p>Tambahkan berkas <code>.gitignore</code> dan isilah berkas tersebut dengan teks berikut.</p> <pre><code># Django\n*.log\n*.pot\n*.pyc\n__pycache__\ndb.sqlite3\nmedia\n\n# Backup files\n*.bak\n\n# If you are using PyCharm\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# AWS User-specific\n.idea/**/aws.xml\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Python\n*.py[cod]\n*$py.class\n\n# Distribution / packaging\n.Python build/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\n.pytest_cache/\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery\ncelerybeat-schedule.*\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# Sublime Text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n*.sublime-workspace\n*.sublime-project\n\n# sftp configuration file\nsftp-config.json\n\n# Package control specific files Package\nControl.last-run\nControl.ca-list\nControl.ca-bundle\nControl.system-ca-bundle\nGitHub.sublime-settings\n\n# Visual Studio Code\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n.history\n</code></pre> </li> <li> <p>Berkas <code>.gitignore</code> adalah sebuah berkas konfigurasi yang digunakan dalam repositori Git untuk menentukan berkas-berkas dan direktori-direktori yang harus diabaikan oleh Git.</p> </li> <li>Berkas-berkas yang tercantum di dalam <code>.gitignore</code> tidak akan dimasukkan ke dalam versi kontrol Git.</li> <li> <p>Berkas ini perlu dibuat karena terkadang ada berkas-berkas yang tidak perlu dilacak oleh Git, seperti berkas-berkas yang dihasilkan oleh proses kompilasi, berkas sementara, atau berkas konfigurasi pribadi.</p> </li> <li> <p>Lakukan <code>add</code>, <code>commit</code>, dan <code>push</code> dari direktori repositori lokal.</p> </li> </ol> <p>Catatan:</p> <ul> <li>Repositori <code>book-tracker</code> yang baru saja kamu buat akan menjadi landasan untuk tutorial-tutorial berikutnya. Repositori ini akan terus digunakan dan berkembang seiring tutorial yang kamu ikuti.</li> <li>Pada akhir semester, kamu akan melihat bahwa repositori tutorial ini telah berkembang menjadi aplikasi yang utuh, buatan kamu sendiri. Sehingga, kamu bisa saja memasukkan ini ke dalam portofiolio kamu!</li> <li>Oleh karena itu, pastikan kamu mengelola repositori ini dengan baik dan mengikuti tutorial-tutorial selanjutnya untuk mengembangkan kemampuan kamu dalam pemrograman berbasis platform.</li> </ul>"},{"location":"tutorial/tutorial-0/#akhir-kata","title":"Akhir Kata","text":"<p>Selamat! Kamu sudah menyelesaikan tutorial tentang penggunaan Git, GitHub, instalasi IDE, dan pengembangan proyek dengan Django.</p> <p>Pesan tambahan, pastikan kamu memahami setiap kode yang kamu tulis, ya. Jangan sampai hanya asal copy-paste tanpa memahaminya terlebih dahulu. Apabila nanti kamu mengalami kesulitan, jangan ragu untuk bertanya ke asisten dosen ataupun teman. Semangat terus dalam menjalani perkuliahan PBP selama satu semester ke depan, dan jangan lupa untuk menikmati setiap prosesnya. Good luck!</p>"},{"location":"tutorial/tutorial-0/#referensi-tambahan","title":"Referensi Tambahan","text":"<ul> <li>About pull request merges</li> <li>Resolving a merge conflict on GitHub</li> </ul>"},{"location":"tutorial/tutorial-0/#kontributor","title":"Kontributor","text":"<ul> <li>Muhammad Iqbal Dwitama</li> <li>Muhammad Nabil Mu'afa</li> </ul>"},{"location":"tutorial/tutorial-0/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2024 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2024. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung.</p>"}]}